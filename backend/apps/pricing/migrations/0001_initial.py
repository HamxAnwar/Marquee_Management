# Generated by Django 5.2.7 on 2025-10-31 10:31

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bookings', '0001_initial'),
        ('core', '0001_initial'),
        ('menu', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BudgetSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_budget', models.DecimalField(decimal_places=2, max_digits=12)),
                ('guest_count', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('event_type', models.CharField(blank=True, max_length=50)),
                ('dietary_preferences', models.TextField(blank=True, help_text='JSON object with dietary preferences')),
                ('excluded_categories', models.TextField(blank=True, help_text='Comma-separated category IDs to exclude')),
                ('preferred_categories', models.TextField(blank=True, help_text='Comma-separated category IDs to prefer')),
                ('suggested_per_person_budget', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_estimated_cost', models.DecimalField(decimal_places=2, max_digits=12)),
                ('variance_percentage', models.DecimalField(decimal_places=4, help_text='How close to target budget (+ or - %)', max_digits=8)),
                ('suggestion_score', models.DecimalField(decimal_places=2, default=0, help_text='Algorithm confidence score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('algorithm_version', models.CharField(default='1.0', max_length=20)),
                ('generation_time_ms', models.IntegerField(blank=True, help_text='Time taken to generate suggestion in milliseconds', null=True)),
                ('is_accepted', models.BooleanField(default=False)),
                ('customer_feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('hall', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.hall')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='budget_suggestions', to='core.organization')),
                ('suggested_package', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='budget_suggestions', to='menu.menupackage')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DynamicPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enable_demand_pricing', models.BooleanField(default=False)),
                ('high_demand_multiplier', models.DecimalField(decimal_places=2, default=Decimal('1.50'), max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('1.0'))])),
                ('low_demand_multiplier', models.DecimalField(decimal_places=2, default=Decimal('0.80'), max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.1'))])),
                ('enable_seasonal_pricing', models.BooleanField(default=False)),
                ('peak_season_months', models.CharField(blank=True, help_text='Comma-separated month numbers (1-12)', max_length=24)),
                ('peak_season_multiplier', models.DecimalField(decimal_places=2, default=Decimal('1.25'), max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('1.0'))])),
                ('enable_early_booking', models.BooleanField(default=False)),
                ('early_booking_days', models.IntegerField(default=60, help_text='Days in advance for early booking discount', validators=[django.core.validators.MinValueValidator(1)])),
                ('early_booking_discount', models.DecimalField(decimal_places=2, default=Decimal('10.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('enable_lastminute_pricing', models.BooleanField(default=False)),
                ('lastminute_days', models.IntegerField(default=7, help_text='Days before event for last-minute pricing', validators=[django.core.validators.MinValueValidator(1)])),
                ('lastminute_discount', models.DecimalField(decimal_places=2, default=Decimal('15.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dynamic_pricing', to='core.organization')),
            ],
        ),
        migrations.CreateModel(
            name='PricingRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('rule_type', models.CharField(choices=[('percentage_discount', 'Percentage Discount'), ('fixed_discount', 'Fixed Amount Discount'), ('percentage_surcharge', 'Percentage Surcharge'), ('fixed_surcharge', 'Fixed Amount Surcharge'), ('service_charge', 'Service Charge'), ('tax', 'Tax'), ('platform_fee', 'Platform Fee')], max_length=25)),
                ('applies_to', models.CharField(choices=[('hall', 'Hall Rental'), ('menu', 'Menu Items'), ('package', 'Menu Packages'), ('total', 'Total Booking')], default='total', max_length=20)),
                ('percentage', models.DecimalField(blank=True, decimal_places=4, help_text='Percentage value (0-100)', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fixed_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed amount value', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_guests', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('max_guests', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('min_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('applicable_event_types', models.TextField(blank=True, help_text='Comma-separated event types (wedding,corporate,etc)')),
                ('applicable_days', models.CharField(blank=True, help_text='Days of week: 1234567 (Mon-Sun), leave blank for all days', max_length=7)),
                ('valid_from', models.DateField(blank=True, null=True)),
                ('valid_until', models.DateField(blank=True, null=True)),
                ('peak_hours_only', models.BooleanField(default=False)),
                ('peak_start_time', models.TimeField(blank=True, null=True)),
                ('peak_end_time', models.TimeField(blank=True, null=True)),
                ('priority', models.IntegerField(default=0, help_text='Higher number = higher priority when multiple rules apply')),
                ('is_active', models.BooleanField(default=True)),
                ('is_cumulative', models.BooleanField(default=True, help_text='Can be combined with other rules')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('applicable_halls', models.ManyToManyField(blank=True, to='core.hall')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_rules', to='core.organization')),
            ],
            options={
                'ordering': ['organization', '-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PriceCalculation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hall_base_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('menu_subtotal', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('package_subtotal', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('guest_discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('early_booking_discount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('lastminute_discount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('promotional_discount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('total_discounts', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('seasonal_surcharge', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('demand_surcharge', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('weekend_surcharge', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('service_charge_rate', models.DecimalField(decimal_places=4, default=0, help_text='Service charge percentage', max_digits=8)),
                ('service_charge_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('tax_rate', models.DecimalField(decimal_places=4, default=0, help_text='Tax percentage', max_digits=8)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('platform_commission_rate', models.DecimalField(decimal_places=4, default=0, help_text='Platform commission percentage', max_digits=8)),
                ('platform_commission', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('subtotal_before_discount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('subtotal_after_discount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('total_before_tax', models.DecimalField(decimal_places=2, max_digits=12)),
                ('grand_total', models.DecimalField(decimal_places=2, max_digits=12)),
                ('price_per_person', models.DecimalField(decimal_places=2, max_digits=10)),
                ('breakdown_json', models.TextField(blank=True, help_text='JSON representation of detailed pricing breakdown')),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='price_calculation', to='bookings.booking')),
                ('calculated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('guest_discount_tier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.discounttier')),
                ('applied_rules', models.ManyToManyField(blank=True, related_name='calculations', to='pricing.pricingrule')),
            ],
            options={
                'ordering': ['-calculated_at'],
            },
        ),
        migrations.CreateModel(
            name='SuggestedMenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suggested_quantity', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('estimated_cost', models.DecimalField(decimal_places=2, max_digits=12)),
                ('priority_score', models.DecimalField(decimal_places=2, default=0, help_text='Item priority in suggestion (higher = more important)', max_digits=5)),
                ('is_essential', models.BooleanField(default=False, help_text='Essential item that should not be removed')),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='menu.menuitem')),
                ('suggestion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suggestion_items', to='pricing.budgetsuggestion')),
                ('variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='menu.menuitemvariant')),
            ],
            options={
                'ordering': ['-priority_score', 'menu_item__category__display_order'],
                'unique_together': {('suggestion', 'menu_item', 'variant')},
            },
        ),
        migrations.AddField(
            model_name='budgetsuggestion',
            name='suggested_menu_items',
            field=models.ManyToManyField(related_name='budget_suggestions', through='pricing.SuggestedMenuItem', to='menu.menuitem'),
        ),
        migrations.CreateModel(
            name='PricingHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_type', models.CharField(choices=[('hall', 'Hall'), ('menu_item', 'Menu Item'), ('package', 'Menu Package'), ('discount_tier', 'Discount Tier'), ('pricing_rule', 'Pricing Rule')], max_length=20)),
                ('entity_id', models.IntegerField()),
                ('field_name', models.CharField(max_length=50)),
                ('old_value', models.TextField()),
                ('new_value', models.TextField()),
                ('change_reason', models.TextField(blank=True)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('affected_bookings_count', models.IntegerField(default=0)),
                ('changed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_history', to='core.organization')),
            ],
            options={
                'ordering': ['-changed_at'],
                'indexes': [models.Index(fields=['organization', 'entity_type', 'entity_id'], name='pricing_pri_organiz_d042e5_idx'), models.Index(fields=['changed_at'], name='pricing_pri_changed_aa98d0_idx')],
            },
        ),
    ]
